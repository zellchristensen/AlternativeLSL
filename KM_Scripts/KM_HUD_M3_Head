// Kemono M3 Hud Created by Lantis Antares
integer channel=-53183595;
//integer channelTxt=-53183594;
vector LocPos2;
vector COLOR_WHITE=<1.0,1.0,1.0>;
integer ToggleSetting;
integer TougueEnable=FALSE;
integer ToggleTougue=FALSE;
integer OmouthShow=1;
integer gListener;
float ScaleX;
integer ToggleLight=FALSE;
vector CustomColor;
integer WindowsEye;

//key UUIDSkin="6efb5618-4084-4a1f-87d1-83520574db7a";  //SkinDefault
// ********************************
llSetLinkAlphaFast(integer link,float alpha,integer face){
    llSetLinkPrimitiveParamsFast(link,[PRIM_COLOR,face,COLOR_WHITE,alpha]);   
}
// ********************************
key llGetLinkTexture(integer link,integer face){
    return llList2Key(llGetLinkPrimitiveParams(link,[PRIM_TEXTURE, face]),0);
}
// ********************************
vector llGetLinkOffset(integer link,integer face){
    return llList2Vector(llGetLinkPrimitiveParams(link,[ PRIM_TEXTURE, face ]),2);
}
// ********************************
llSetLinkOffset(integer link,integer face,float h,float v){
    list Param=llGetLinkPrimitiveParams(link,[ PRIM_TEXTURE, face ]);
     Param = llListReplaceList(Param, [<h,v,0>], 2, 2); 
    llSetLinkPrimitiveParamsFast(link,[PRIM_TEXTURE,face]+Param);
}
//*********************************
vector llGetLinkColor(integer link,integer face){
return llList2Vector(llGetLinkPrimitiveParams(link,[PRIM_COLOR,face]),0);
}
//*********************************
llSetMLinkAlpha(integer link,float alpha,list faceList){
  integer i=llGetListLength(faceList)-1;
    for(;i>=0;i--){
      llSetLinkAlpha(link,alpha,llList2Integer(faceList,i));
    }
}
llSetMFLinkAlpha(list linkList,float alpha,integer face){
  integer i=llGetListLength(linkList)-1;
    for(;i>=0;i--){
      llSetLinkAlpha(llList2Integer(linkList,i),alpha,face);
    }    
}
//*********************************
float llGetLinkAlpha(integer Link,integer Face){
    return llList2Float(llGetLinkPrimitiveParams(Link,[PRIM_COLOR,Face]),1);
}
//*********************************
// 2:         valid key, not NULL_KEY
// 1 (TRUE):  NULL_KEY
// 0 (FALSE): not a key
integer isKey(key in){
    if (in)
        return 2;
    return (in == NULL_KEY);
}
//*********************************
llSendButton(integer mouthShow,string SendMsgOn,string SendMsgOff,integer EnableToug){
    list TableMouthShow=["e01","e02","e03","e04","e05","e06","e07","e08","e09","e10","e11","e12","e13","e14","tongue","teeth"];    
    if (OmouthShow!=mouthShow){
        llSetLinkAlpha(9,!EnableToug,5);
        llRegionSay(channel,llList2String(TableMouthShow,mouthShow-1)+":-1"+SendMsgOn+"_1");
        llSleep(0.02);
        llRegionSay(channel,llList2String(TableMouthShow,OmouthShow-1)+":-1"+SendMsgOff+"_tongue:-1_0");
        TougueEnable=EnableToug;
        OmouthShow=mouthShow;
        ToggleTougue=FALSE;
    }
}
// ********************************
AddCustomTexture(){
   string TextBoxHelp="\nAcceptable commands";
        TextBoxHelp+="\n*Note: Asterisk* between command and UUID, no spaces! One command at a time!";
        TextBoxHelp+="\n\nhead*UUID";
        TextBoxHelp+="\neyetex*UUID  (Both sides)";
        TextBoxHelp+="\neyetexL*UUID (Left side)";
        TextBoxHelp+="\neyetexR*UUID (Right side)";
        TextBoxHelp+="\neyebase*UUID  (Both sides)";
        TextBoxHelp+="\neyebaseL*UUID (Left side)";
        TextBoxHelp+="\neyebaseR*UUID (Right side)";
        TextBoxHelp+="\nbrows*UUID";
        TextBoxHelp+="\nlashes*UUID";
        TextBoxHelp+="\nblush*UUID";
        TextBoxHelp+="\ntears*UUID";
        TextBoxHelp+="\n\nExample:";
        TextBoxHelp+="\nskinL*00000000-0000-0000-0000-000000000000";

   gListener = llListen( channel+2, "", "", "");     
   llTextBox(llDetectedKey(0),TextBoxHelp, channel+2);
}
// ********************************
integer CheckerControl(integer link,integer face){
//    face=-1;
    list Param=llGetLinkPrimitiveParams(link,[PRIM_TEXTURE,face]);  
    vector v1=llList2Vector(Param,2);
    if (v1.y==0){
//     Param = llListReplaceList(Param, [<0.0,-0.025,0>], 2, 2); 
     Param = llListReplaceList(Param, [<0.0,-0.024,0>], 2, 2); 
    llSetLinkPrimitiveParamsFast(link,[PRIM_TEXTURE,face]+Param);            
    return 1;
    }else{
     Param = llListReplaceList(Param, [<0,0,0>], 2, 2); 
    llSetLinkPrimitiveParamsFast(link,[PRIM_TEXTURE,face]+Param);            
    return 0;
    } 
}
// ********************************
string EmoteControl(integer link,integer face,integer MaxFace){
    list Param=llGetLinkPrimitiveParams(link,[PRIM_TEXTURE,face]);  
    vector v1=llList2Vector(Param,2);
    integer w=(integer)((v1.x+0.001)*100);
    integer i=0;
    float OffsetFace=0.0;
    for(;i<MaxFace;i++) if (w==9*i) OffsetFace=i+1;
    if (OffsetFace>MaxFace)OffsetFace=0;
    Param = llListReplaceList(Param, [<0.09*OffsetFace,0,0>], 2, 2);
    llSetLinkPrimitiveParamsFast(link,[PRIM_TEXTURE,face]+Param);
    return (string)OffsetFace;
}
// ********************************
vector ColorPicker(vector touchedpos){
        float x;float r;float g;float b;
        float i = touchedpos.x;
        x=360*(1-touchedpos.y);
        r=0;
        g=0;
        b=0;
        if (x>=0&&x<=60){
            r=255;
            g=x*255/60;
        }
        if (x>60&&x<=120){
            r=255-(x-60)*255/60;
            g=255;
        }
        if (x>120&&x<=180){
            g=255;
            b=(x-120)*255/60;
        }
        if (x>180&&x<240){
            g=255-(x-180)*255/60;
            b=255;
        }        
        if (x>240&&x<300){
            r=(x-240)*255/60;
            b=255;
        }    
        if (x>300&&x<=360){
            r=255;
            b=255-(x-300)*255/60;
        }  
        r = (r/255);
        g = (g/255);
        b = (b/255);
        return <r* i,g*i,b*i>;
}
// ********************************
DigitColor(integer link,integer value){
    float SubVal;
    integer i;
    if (value>255) value=255;
    if (value<0) value=0;
    for(i=1;i<4;i++){
        SubVal=((float)(value % 10))/10-0.55004;
        value=value/10;
        llSetLinkOffset(link,i,SubVal,0);
    }
}
// ********************************
SetPointColor(vector ColorIndex,float Intensity){
    float SubIntensity=1-(Intensity*2.1);
    ColorIndex.x-=SubIntensity;
    ColorIndex.y-=SubIntensity;
    ColorIndex.z-=SubIntensity;
     DigitColor(14,(integer)(ColorIndex.x*255));  //red
     DigitColor(7,(integer)(ColorIndex.y*255));  //green
     DigitColor(11,(integer)(ColorIndex.z*255));  //blue
     llSetLinkColor(1,ColorIndex,5); 
     integer i;
     if (WindowsEye) i=1; else i=2;
     llSetLinkColor(16,ColorIndex,i);
     llSetLinkColor(17,ColorIndex,i);
     llSetLinkColor(19,ColorIndex,i);
     llSetLinkColor(20,ColorIndex,i);
     llSetLinkColor(22,ColorIndex,i);
     llSetLinkColor(23,ColorIndex,i);
}
// ********************************
SetLayerEye(list faces){
    llSetLinkAlpha(16,0,ALL_SIDES);
    llSetMLinkAlpha(16,1,faces);
    llSetLinkAlpha(17,0,ALL_SIDES);
    llSetMLinkAlpha(17,1,faces);
    llSetLinkAlpha(19,0,ALL_SIDES);
    llSetMLinkAlpha(19,1,faces);
    llSetLinkAlpha(20,0,ALL_SIDES);
    llSetMLinkAlpha(20,1,faces);
    llSetLinkAlpha(22,0,ALL_SIDES);
    llSetMLinkAlpha(22,1,faces);
    llSetLinkAlpha(23,0,ALL_SIDES);     
    llSetMLinkAlpha(23,1,faces);
}
// ********************************
default{
   state_entry(){
        list TableMouth=["e02","e03","e04","e05","e06","e07",
            "e08","e09","e10","e11","e12","e13","e14","tongue","teeth"];
        ToggleSetting=FALSE;
        vector Scale=llGetScale();        
        ScaleX= Scale.x/0.27320;
        LocPos2=llGetLocalPos();
        llSetLinkPrimitiveParamsFast(LINK_ROOT,[PRIM_POSITION, LocPos2]);        
        OmouthShow=1;
        integer indexTable=llGetListLength(TableMouth)-1;
        llRegionSay(channel,"e01:-1_1");        
        do{
           llRegionSay(channel,llList2String(TableMouth,indexTable)+":-1_0");
        }while(indexTable--);        
        CustomColor=llGetLinkColor(2,5);    
        llSetLinkAlpha(8,1.0,ALL_SIDES);
        //WindowsEye=ON        
        llSetLinkOffset(21,1,0,0);
        llSetMLinkAlpha(1,0,[3,6]);
        llSetMLinkAlpha(1,1,[0,5]);                                            
        SetLayerEye([1,3]);
        llSetMLinkAlpha(2,1,[0,1,3]);
         WindowsEye=TRUE;
        
    }
    changed(integer change)
    {
        if (change & CHANGED_SCALE)
        {
            vector Scale=llGetScale();
        ScaleX= Scale.x/0.27320;
        }
    }
    attach( key id ){
        llResetScript();
    }
    listen(integer chn, string name, key id, string message){  
        if (llGetOwnerKey(id)!= llGetOwner()) return;
        list SSublist=llParseString2List(message,"*","");
        llListenRemove(gListener);
        if (llGetListLength(SSublist)>1){
            string command=llList2String(SSublist,0);
            key KeyMsg=llList2Key(SSublist,1);
            if (isKey(KeyMsg)!=2)return;
            if (command=="head"){
                llSetLinkTexture(4,KeyMsg,0);
                llSetLinkTexture(4,KeyMsg,2);
            }else if (command=="head"){
            }else if (command=="eyeTex"){
            }else if (command=="eyeTexR"){
            }else if (command=="eyeTexL"){
            }else if (command=="eyebase"){
            }else if (command=="eyebaseR"){
            }else if (command=="eyebaseL"){
            }else if (command=="brows"){
            }else if (command=="lashes"){
            }else if (command=="blush"){
            }else if (command=="tears"){
            }else llOwnerSay("Error: "+command+" is not a valid command");    
        }else{
            if (message=="TypeB"){
                llRegionSay(channel,"SetEyeSize/<1.5,1.0,0.0>");
            }else if (message=="TypeB1"){
                llRegionSay(channel,"SetEyeSize/<1.7,1.0,0.0>");
            }else if (message=="TypeA"){
                llRegionSay(channel,"SetEyeSize/<1.0,1.0,0.0>");
            }else if (message=="TypeA1"){
                llRegionSay(channel,"SetEyeSize/<1.3,1.3,0.0>");
            }else if (message=="TypeA2"){
                llRegionSay(channel,"SetEyeSize/<1.8,1.8,0.0>");
            }
        }
    }        
    touch(integer num_detected){
        integer link = llDetectedLinkNumber(0);
        if (link==18){
             vector touchedpos = llDetectedTouchST(0);   
             float Intensity=touchedpos.y;
             llSetLinkOffset(link,ALL_SIDES,0,-Intensity);
             llSetLinkColor(18,<Intensity,0,0>,ALL_SIDES);             
             SetPointColor(llGetLinkColor(15,ALL_SIDES),Intensity);
        }else if (link==15){
             vector touchedpos = llDetectedTouchST(0);   
             llSetLinkOffset(link,ALL_SIDES,-touchedpos.x,-touchedpos.y);
             touchedpos=ColorPicker(touchedpos);
             llSetLinkColor(15,touchedpos,ALL_SIDES);
             vector VectTemp=llGetLinkColor(18,ALL_SIDES);
             SetPointColor(touchedpos,VectTemp.x);
        }
    }        
           
    touch_start(integer num_detected){
        integer link = llDetectedLinkNumber(0);
        integer face = llDetectedTouchFace(0);
        vector arrow=llDetectedTouchST(0);
        if (face == TOUCH_INVALID_FACE)
            llSay(PUBLIC_CHANNEL, "Sorry, your viewer doesn't support touched faces.");
        else{
        // link1
            if ((link==1)&&(WindowsEye)){
                if ((face==3)||(face==6)){
                    if (llGetLinkAlpha(link,face)) llSetLinkAlpha(link,0,face); else llSetLinkAlpha(link,0.8,face);
                }else if (face==0){
                    if (llGetLinkOffset(1,0)){
                        llSetLinkOffset(1,0,0,0);                        
                        llSetMFLinkAlpha([16,17,19,20,22,23],0,0);
                        llSetMFLinkAlpha([16,17,19,20,22,23],1,1);
                        llSetMFLinkAlpha([16,17,19,20,22,23],1,3);
                    }else{
                        llSetLinkOffset(1,0,0,0.888);
                        llSetMFLinkAlpha([16,17,19,20,22,23],1,0);
                        llSetMFLinkAlpha([16,17,19,20,22,23],0,1);
                        llSetMFLinkAlpha([16,17,19,20,22,23],0,3);
                    }
                }else if (face==2){
                    llSay(0,"Custom eyes cleared.");
                }else if (face==7){
                    ToggleLight=!ToggleLight;
                    llRegionSay(channel,"light/"+(string)ToggleLight);
                }                
                //link 5
            }else if (link==5){
                if (llVecDist(arrow,<0.732856,0.155067,0.0>)<0.04){
                    LocPos2.y=-0.31*ScaleX;
                    llSetLinkPrimitiveParamsFast(LINK_ROOT,[PRIM_POSITION, LocPos2]);   
                    llSetLinkAlpha(8,1.0,ALL_SIDES);
                }else if (llVecDist(arrow,<0.873860,0.148382,0.0>)<0.029){
                    ToggleSetting=!ToggleSetting;
                    if (ToggleSetting) LocPos2.y=0.16*ScaleX; else LocPos2.y=-0.16*ScaleX;
                    llSetLinkPrimitiveParamsFast(LINK_ROOT,[PRIM_POSITION, LocPos2]);   
                    llSetLinkAlpha(8,0.0,ALL_SIDES);
                }else if (llVecDist(arrow,<0.939,0.175,0.0>)<0.056){
                    llRegionSay(channel,"Undeform");
                }
                //link 4
            }else if (link==4){
                if ((face==0)||(face==2)){
                    AddCustomTexture();
                }
                //link 6
            }else if (link==6){
                if (face==0){
                    llSetLinkAlpha(link,0,0);
                    llSetMLinkAlpha(link,1,[1,3]);
                }else if (face==1){
                    llSetLinkAlpha(link,0,1);
                    llSetMLinkAlpha(link,1,[0,3]);
                }else if (face==3){
                    llSetLinkAlpha(link,0,3);                
                    llSetMLinkAlpha(link,1,[0,1]);
                }else if (face==4){
                    llSetLinkAlpha(link,0,4);
                    llSetLinkAlpha(link,1,5);
                }else if (face==5){
                    llSetLinkAlpha(link,1,4);
                    llSetLinkAlpha(link,0,5);
                }
                //link 9
            }else if (link==9){
                if (face==0){
                    llSendButton(8,"","_teeth:-1",FALSE);
                }else if (face==2){
                    llSendButton(9,"","_teeth:-1",FALSE);
                }else if (face==1){
                    llSendButton(10,"_teeth:1","_teeth:0",FALSE);
                }else if (face==4){
                    llSendButton(11,"_teeth:0","_teeth:1",FALSE);
                }else if (face==3){
                    llSendButton(12,"_teeth:0","_teeth:1",TRUE);
                }else if (face==6){
                    llSendButton(13,"_teeth:0","_teeth:1",TRUE);
                }else{
                    if (TougueEnable){
                        ToggleTougue=!ToggleTougue;
                        if (ToggleTougue){
                            llRegionSay(channel,"tongue:-1_1");
                            llRegionSay(channel,"teeth:0_0");
                        }else{
                            llRegionSay(channel,"tongue:-1_0");
                            llRegionSay(channel,"teeth:0_1");
                        }
                    }
                }
                llSetLinkAlpha(link,0.1,ALL_SIDES);
                llSetLinkAlpha(link,0.5,face);
                llSetLinkAlpha(link,!TougueEnable,5);
                llSetLinkAlpha(10,0.1,ALL_SIDES);
                //link 13
            }else if (link==13){
                //Created by Lantis Antares
                if (face==0) llRegionSay(channel,"Meyebrows/"+EmoteControl(link,face,2));
                else if (face==1) llRegionSay(channel,"Mblush/"+EmoteControl(link,face,3));
                else if (face==2) llRegionSay(channel,"Meye/"+EmoteControl(link,face,3));
                else llRegionSay(channel,"MTears/"+EmoteControl(link,face,2));
                //link 10
            }else if (link==10){
                llSetLinkAlpha(9,0.1,ALL_SIDES);
                llSetLinkAlpha(link,0.1,ALL_SIDES);
                if (face==0){
                    llSendButton(1,"","_teeth:-1_tongue:-1",FALSE);
                }else if (face==2){
                    llSendButton(2,"","_teeth:-1_tongue:-1",FALSE);
                }else if (face==1){
                    llSendButton(3,"_teeth:1","_teeth:0",FALSE);
                }else if (face==4){
                    llSendButton(4,"_teeth:0","_teeth:1_tongue:-1",FALSE);
                }else if (face==3){
                    llSendButton(5,"_teeth:0","_teeth:1_tongue:-1",FALSE);
                }else if (face==6){
                    llSendButton(6,"_teeth:0","_teeth:1_tongue:-1",FALSE);
                }else if (face==5){
                    llSendButton(7,"_teeth:0","_teeth:1_tongue:-1",TRUE);
                }
                llSetLinkAlpha(link,0.5,face);
                //link 12
            }else if (link==12){
                vector VColor=llGetLinkColor(1,5);
                string SendMsg="";
                if (WindowsEye){
                    if (llGetLinkAlpha(1,3)==0){
                        SendMsg="SetPar/eyes:";                    
                        SendMsg+=llDumpList2String([PRIM_COLOR,3,VColor,1],":");
                    }
                    if (llGetLinkAlpha(1,6)==0){
                        if (SendMsg=="")SendMsg="SetPar/eyes:"; else SendMsg+=":";
                        SendMsg+=llDumpList2String([PRIM_COLOR,1,VColor,1],":");                    
                    }                
                }else{
                    SendMsg="FullColor/"+(string)VColor;
                    llRegionSay(channel-1,SendMsg);
                }
                llRegionSay(channel,SendMsg);
                //link 8
            }else if (link==8){
                if (ToggleSetting) LocPos2.y=0.16*ScaleX; else LocPos2.y=-0.16*ScaleX;
                llSetLinkAlpha(8,0.0,ALL_SIDES);   
                llSleep(0.02);                                
                llSetLinkPrimitiveParamsFast(LINK_ROOT,[PRIM_POSITION, LocPos2]);  
             //link2         
            }else if (link==2){
                string SendMsg=(string)CheckerControl(link,face);
                if (face==0){
                    float Intensity=(((float)SendMsg)*0.1);
                    SendMsg="SetPar/eyes:"+llDumpList2String([PRIM_GLOW,2,Intensity,PRIM_GLOW,4,Intensity],":");
                }else if (face==1){
                    integer SubFullBrg=(integer)SendMsg;
                    SendMsg="SetPar/eyes:"+llDumpList2String([PRIM_FULLBRIGHT,1,SubFullBrg,PRIM_FULLBRIGHT,3,SubFullBrg],":");
                    llSleep(0.5);
                }else if (face==2){    
                    SendMsg="typing/"+SendMsg;
                }else if (face==3){    
                    float Intensity=(1-((float)SendMsg)*0.5);
                    SendMsg="SetPar/eyes:"+llDumpList2String([PRIM_COLOR,2,COLOR_WHITE,Intensity],":");
                    SendMsg+=":"+llDumpList2String([PRIM_COLOR,4,COLOR_WHITE,Intensity],":");
                }else if (face==4){    
                    SendMsg="emotes/"+SendMsg;
                }else{
                    SendMsg="voice/"+SendMsg;
                } 
                llRegionSay(channel,SendMsg);      
            }else if ((link==19)||(link==22)||(link==23)||(link==17)||(link==16)||(link==20)){
                if (!WindowsEye) return;
                key filtText;
                key eyeText;
                if (llGetLinkAlpha(22,0)){
                    filtText=llGetLinkTexture(23,1); //filter
                    eyeText=llGetLinkTexture(link,0); //eye
                }else{
                    filtText=llGetLinkTexture(link,1); //filter
                    eyeText=llGetLinkTexture(link,3); //eye
                }
                string SendMsg="";
                vector DEF_VECTOR=<1.0, 1.0, 0.0>;
                if (llGetLinkAlpha(1,3)==0){
                    SendMsg="SetPar/eyes:";
                    SendMsg+=llDumpList2String([PRIM_TEXTURE,2,eyeText,DEF_VECTOR,ZERO_VECTOR,0],":");
                    SendMsg+=":"+llDumpList2String([PRIM_TEXTURE,3,filtText,DEF_VECTOR,ZERO_VECTOR,0],":");
                }
                if (llGetLinkAlpha(1,6)==0){
                    if (SendMsg=="")SendMsg="SetPar/eyes:"; else SendMsg+=":";
                    SendMsg+=llDumpList2String([PRIM_TEXTURE,1,filtText,DEF_VECTOR,ZERO_VECTOR,0],":");
                    SendMsg+=":"+llDumpList2String([PRIM_TEXTURE,4,eyeText,DEF_VECTOR,ZERO_VECTOR,0],":");                    
                }
                llRegionSay(channel,SendMsg);
                
                //link 21
            }else if (link==21){                
                if ((arrow.y>0.441)&&(arrow.y<0.48)&&(arrow.x>0.032)&&(arrow.x<0.332)){
                    llRegionSay(channel,"KMDefault/");
                    llSleep(1);
               }else if ((arrow.x>0.47)&&(arrow.x<0.634)){
                    if ((arrow.y>0.54)&&(arrow.y<0.572)){
                        llRegionSay(channel,"SetSkin/"+(string)llGetLinkTexture(4,0));                               
                    }else if ((arrow.y>0.504)&&(arrow.y<0.535)){
                        AddCustomTexture();
                    }    
               }else if (arrow.y>0.96){
                  llSetLinkAlpha(1,0,ALL_SIDES);     
                   if (arrow.x<0.128){
                       //eyes windows
                      llSetLinkOffset(21,1,0,0);
                      llSetMLinkAlpha(1,0,[3,6]);
                      llSetMLinkAlpha(1,1,[0,5]);                      
                      
                      SetLayerEye([1,3]);
                      llSetMLinkAlpha(2,1,[0,1,3]);
                      WindowsEye=TRUE;
                   }else{
                       //skin windows
                      llSetLinkOffset(21,1,0,-0.58400); 
                      llSetLinkAlpha(1,1,5);
                      SetLayerEye([2]);
                      llSetMLinkAlpha(2,0,[0,1,3]);                      
                      WindowsEye=FALSE;
                   }
                   vector tempSwap=llGetLinkColor(1,5);
                   llSetLinkColor(1,CustomColor,5);
                   CustomColor=tempSwap;
               }else if ((arrow.y>0.76)&&(arrow.y<0.78)&&(arrow.x>0.119471)&&(arrow.x<0.26)){
                   if (llGetLinkAlpha(1,0)==0) return;
                   list DialogMsg;
                   string msg;                   
                   if (arrow.x<0.19){
                        msg="\nPick an eye size.";
                        DialogMsg=["TypeA", "TypeA1","TypeA2","TypeB","TypeB1"];
                   }else{
                        msg="\nPick a roll direction";
                        DialogMsg=["RDownRight","RDown","RDownLeft","RRight","Center","RLeft","RUpRight","RUp","RUpLeft","[-----]","RUp2","Undo"];
                    }
                   gListener = llListen( channel+2, "", "", "");     
                   llDialog(llDetectedKey(0), msg, DialogMsg ,channel+2);
//           }else{
//                    llSay(0,(string)arrow);
               }
            }
        }
    }
}
